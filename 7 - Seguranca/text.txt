*** RealTime Database ***

* Cria um index para os nós

"card": {
        ".indexOn": "idade"
     },

"estoque": {
	".indexOn": ".value"
     }

* Regras de segunça

{
  "rules": {
    "infos": {
      ".read": "auth != null",
    	".write": false,
    },
    "users": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid == $uid",
      }	
    },
    "produtos": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null",
        ".validate": "newData.child('descricao').isString() && newData.child('descricao').val().length < 400"
      }
    }
  }
}

*** CloudStore Database ***

* Regras de segunça

service cloud.firestore {
  match /databases/{database}/documents {
    match /cards/{card} {
      allow read, write: if request.auth != null;
    }
    
  	match /produtos/{produto} {
    	// Qualquer pessoa pode pegar esse documento pelo id
    	allow get;
      
      // Lista uma coleção inteira
      allow list: if request.auth != null;
      
      // Update do documento
      allow update: if resource.data.user_id == request.auth.uid;
      
      // Criar um novo documento
      allow create: if request.resource.data.user.id != null
      		&& request.resource.data.descricao.length < 400
          && request.resource.data.valor is float
          && request.resource.data.hasAll(['user_id', 'descricao', 'valor']);
          
      // Deletar um documento
      allow delete: if get(/database/$(database)/documents/permissoes/$(request.auth.uid)).data.deletar == true
    }
  }
}